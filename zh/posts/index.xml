<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Marginlon</title>
    <link>/zh/posts/</link>
    <description>Recent content in Posts on Marginlon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 17 Apr 2022 16:28:39 +0800</lastBuildDate><atom:link href="/zh/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaScript 模块化编程 进阶技巧</title>
      <link>/zh/posts/javascript-%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B-%E8%BF%9B%E9%98%B6%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Sun, 17 Apr 2022 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B-%E8%BF%9B%E9%98%B6%E6%8A%80%E5%B7%A7/</guid>
      <description>1. 模块化编程 2. 进阶技巧 2.1 JQ环境区分 2.2 柯里化函数 2.3 compose函数 2.4 惰性函数 1. 模块化编程 模块化编程 高级单例 解决私有化：自执行函数，产生闭包 模块间的互</description>
    </item>
    
    <item>
      <title>JavaScript 函数防抖 函数节流</title>
      <link>/zh/posts/javascript-%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96-%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81/</link>
      <pubDate>Thu, 14 Apr 2022 16:29:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96-%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81/</guid>
      <description>1. 函数防抖 2. 函数节流 1. 函数防抖 防抖：只识别一次 &amp;ndash;点击事件 let submit = document.querySelector(&amp;quot;#submit&amp;quot;); //简易处理:加标识 不适于通用 submit.isLoading = false; submit.onclick = function () { if (this.isLoading) return; this.isLoading = true; console.</description>
    </item>
    
    <item>
      <title>JavaScript This指向</title>
      <link>/zh/posts/javascript-this%E6%8C%87%E5%90%91/</link>
      <pubDate>Wed, 13 Apr 2022 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-this%E6%8C%87%E5%90%91/</guid>
      <description>1. This指向: 函数执行的主体 1.1. 事件绑定 1.2. 函数执行 [普通/成员访问/匿名函数/回调函数] 1.3. 构造函数 1.4. 箭头函数 [生成器generator] 1.5. call/a</description>
    </item>
    
    <item>
      <title>JavaScript 闭包应用</title>
      <link>/zh/posts/javascript-%E9%97%AD%E5%8C%85%E5%BA%94%E7%94%A8/</link>
      <pubDate>Tue, 12 Apr 2022 16:29:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-%E9%97%AD%E5%8C%85%E5%BA%94%E7%94%A8/</guid>
      <description>1. 闭包应用：循环中的闭包处理方案 1.1. 循环事件绑定 1.2. 循环定时器 1. 闭包应用：循环中的闭包处理方案 1.1. 循环事件绑定 var buttons = document.querySelectorAll(&#39;button&#39;); for (var i = 0; i &amp;lt; buttons.length; i++) { // i=0 buttons[0] 第一个按钮 //</description>
    </item>
    
    <item>
      <title>JavaScript GC机制 闭包作用域 let/const/var</title>
      <link>/zh/posts/javascript-gc%E6%9C%BA%E5%88%B6-%E9%97%AD%E5%8C%85%E4%BD%9C%E7%94%A8%E5%9F%9F-let-const-var/</link>
      <pubDate>Tue, 12 Apr 2022 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-gc%E6%9C%BA%E5%88%B6-%E9%97%AD%E5%8C%85%E4%BD%9C%E7%94%A8%E5%9F%9F-let-const-var/</guid>
      <description>1. GC机制 2. 闭包作用域 3.let/const/var 1. GC机制 GC：浏览器的垃圾回收机制（内存释放） 栈内存： 加载页面，形成全局context，只有页面关闭后，全局context释</description>
    </item>
    
    <item>
      <title>JavaScript 堆栈内存 函数底层运行机制 块级作用域</title>
      <link>/zh/posts/javascript-%E5%A0%86%E6%A0%88%E5%86%85%E5%AD%98-%E5%87%BD%E6%95%B0%E5%BA%95%E5%B1%82%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6-%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
      <pubDate>Mon, 11 Apr 2022 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-%E5%A0%86%E6%A0%88%E5%86%85%E5%AD%98-%E5%87%BD%E6%95%B0%E5%BA%95%E5%B1%82%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6-%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
      <description>1. 堆栈内存 2. 函数底层运行机制 3. 块级作用域 1. 堆栈内存 栈内存(Stack) 执行环境栈 EC stack (execution context stack) EC(G) 全局执行上下文，全局代码执行 VO(G) 全局变量对象[存储全局上下文</description>
    </item>
    
    <item>
      <title>JavaScript 精度问题</title>
      <link>/zh/posts/javascript-%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 11 Apr 2022 16:27:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/</guid>
      <description>1. 精度问题 1. 精度问题 解决方法： 扩大系数 第三方库 Math.js decimal.js big.js JS中有关于小数的计算会出现精准度丢失的问题 JS中所有值以2进制存在底层，会出现无限循环的情况 底层</description>
    </item>
    
    <item>
      <title>JavaScript 数据类型 类型检测 类型转换</title>
      <link>/zh/posts/javascript-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Sun, 10 Apr 2022 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
      <description>1. 数据类型 2. 类型检测 3. 类型转换 1. 数据类型 原始值 number: // NaN 非有效数字、Infinity 无穷大 // Number.MIN_SAFE_INTERGER // NaN == NaN false // NaN === NaN false =&amp;gt; NaN !== NaN // =&amp;gt; isNaN([value]); // Object.is(NaN,NaN); true string: &amp;lsquo;&amp;rsquo;, &amp;ldquo;&amp;rdquo;,`` boolean: true、f</description>
    </item>
    
    <item>
      <title>JavaScript 数据结构</title>
      <link>/zh/posts/javascript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sat, 09 Apr 2022 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>1. 数组 Array 2. 栈 3. 队列 4. 排序 1. 数组 Array JS数组可以存储不同数据类型 容量随存储内容自动缩放 Array.prototype的API //封装数组 2. 栈 class Stack{ container = []; enter(item){ this.container.push(item);</description>
    </item>
    
    <item>
      <title>JavaScript axios</title>
      <link>/zh/posts/js_items_17/</link>
      <pubDate>Fri, 24 Sep 2021 20:00:00 +0800</pubDate>
      
      <guid>/zh/posts/js_items_17/</guid>
      <description> 1.axios  1.axios </description>
    </item>
    
    <item>
      <title>JavaScript AJAX</title>
      <link>/zh/posts/javascript-ajax/</link>
      <pubDate>Fri, 24 Sep 2021 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-ajax/</guid>
      <description>1. AJAX 1. AJAX AJAX解决网页异步刷新 同步刷新 异步刷新 1. 浏览器可以从服务器同时请求多项内容； 2. 浏览器请求返回的速度会快得多； 3. 只有页面中真正改变的部分得到更</description>
    </item>
    
    <item>
      <title>JavaScript HTTP网络层 跨域方案</title>
      <link>/zh/posts/js_items_15/</link>
      <pubDate>Thu, 23 Sep 2021 20:00:00 +0800</pubDate>
      
      <guid>/zh/posts/js_items_15/</guid>
      <description>1. HTTP网络层 2. 跨域方案 1. HTTP网络层 http vs https 超文本传输协议(s: ssl加密) 端口号:80 443 ftp:文件上传下载协议 端口号: 21 页面 [第一次访问] UR</description>
    </item>
    
    <item>
      <title>JavaScript Iterator Generator</title>
      <link>/zh/posts/js_items_14/</link>
      <pubDate>Wed, 22 Sep 2021 20:00:00 +0800</pubDate>
      
      <guid>/zh/posts/js_items_14/</guid>
      <description>1. Iterator 2. Generator 1. Iterator Iterator是一种机制，遍历各种不同的数据，依次处理成员 next方法遍历 每次遍历返回一个对象 { done:false, value: xxx} done：记录是否完成 value：</description>
    </item>
    
    <item>
      <title>JavaScript Promise Async/Await</title>
      <link>/zh/posts/js_items_13/</link>
      <pubDate>Mon, 20 Sep 2021 20:00:00 +0800</pubDate>
      
      <guid>/zh/posts/js_items_13/</guid>
      <description>1. Promise 2. Async/Await 1. Promise Promise // PromiseState: pending/fulfilled/rejected // PromiseResult: undefined // new Promise 立即执行传递的executor函数 /* 实例.then(onfulfilled,onrejected) 1. 观察实例状态，如果</description>
    </item>
    
    <item>
      <title>JavaScript 浏览器渲染机制 CRP优化 事件循环机制</title>
      <link>/zh/posts/js_items_12/</link>
      <pubDate>Fri, 17 Sep 2021 20:00:00 +0800</pubDate>
      
      <guid>/zh/posts/js_items_12/</guid>
      <description>1.浏览器渲染机制 CRP优化 2.事件循环机制 1.浏览器渲染机制 CRP优化 从服务器基于HTTP网络请求回来的数据 16进制的文件流 浏览器解析 =&amp;gt; HTML字符</description>
    </item>
    
    <item>
      <title>JavaScript 工厂设计模式 数组和对象的深浅拷贝 深浅合并</title>
      <link>/zh/posts/js_items_11/</link>
      <pubDate>Thu, 16 Sep 2021 20:00:00 +0800</pubDate>
      
      <guid>/zh/posts/js_items_11/</guid>
      <description>1.工厂设计模式 2.数组和对象的深浅拷贝 3.深比较浅比较合并 1.工厂设计模式 var jQuery = function( selector, context ) { return new jQuery.fn.init( selector, context ); }; jQuery.fn = jQuery.prototype = { jquery: &amp;quot;3.6.0&amp;quot;, constructor: jQuery }; init = jQuery.fn.init = function( selector, context, root ){}; init.prototype = jQuery.fn;</description>
    </item>
    
    <item>
      <title>JavaScript CLASS 继承</title>
      <link>/zh/posts/js_items_10/</link>
      <pubDate>Wed, 15 Sep 2021 20:00:00 +0800</pubDate>
      
      <guid>/zh/posts/js_items_10/</guid>
      <description>1.CLASS 2.类的继承 1.CLASS //ES6 class Modal { constructor(x, y) { this.x = x; this.y = y; // this.n = 100; } // 给实例的私有属性和方法 n = 100; // 原型上公共方法（公共属性无法直接设置，方法不能使用箭头函数） // 增加</description>
    </item>
    
    <item>
      <title>JavaScript 面向对象[构造函数 原型和原型链 面向对象基础]</title>
      <link>/zh/posts/js_items_09/</link>
      <pubDate>Tue, 14 Sep 2021 20:00:00 +0800</pubDate>
      
      <guid>/zh/posts/js_items_09/</guid>
      <description>1. 构造函数 2. 原型和原型链 3. 面向对象基础 1. 构造函数 JS内置类 Number String Boolean Symbol BigInt Object Function &amp;hellip; DOM HTML标签 -&amp;gt; HTMLXXXElement -&amp;gt; HTMLElement -&amp;gt; Element -&amp;gt; Node -&amp;gt; EventTarget -&amp;gt; Object HTMLDocument -&amp;gt; Document -&amp;gt; Node -&amp;gt; &amp;hellip; Window -&amp;gt; WindowProperties -&amp;gt; EventTarget -&amp;gt; Object 元素集合 -&amp;gt;</description>
    </item>
    
    <item>
      <title>JavaScript BOM</title>
      <link>/zh/posts/javascript-bom/</link>
      <pubDate>Sat, 17 Apr 2021 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-bom/</guid>
      <description> 1. BOM  1. BOM  navigator.userAgent history location window screen  </description>
    </item>
    
    <item>
      <title>JavaScript DOM</title>
      <link>/zh/posts/javascript-dom/</link>
      <pubDate>Sat, 17 Apr 2021 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-dom/</guid>
      <description>1. {DOM} 1. {DOM} 基本类型 Document DocumentType:doctype标签 Element:H5标签 Attr:元素的属性 Text:标签内文本 Comment:注释 Do</description>
    </item>
    
    <item>
      <title>JavaScript 事件绑定 事件对象 事件传播 事件委托</title>
      <link>/zh/posts/javascript-%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A-%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1-%E4%BA%8B%E4%BB%B6%E4%BC%A0%E6%92%AD-%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</link>
      <pubDate>Sat, 17 Apr 2021 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A-%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1-%E4%BA%8B%E4%BB%B6%E4%BC%A0%E6%92%AD-%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</guid>
      <description>1. 事件绑定 2. 事件对象 3. 事件传播 4. 事件委托 1. 事件绑定 DOM0: DOM对象.事件 = 函数 DOM2: element.addEventListener(&#39;click&#39;,function(){},false) true:捕获阶段触发 / false：冒泡阶段触发(默认) this: 事件对象 ie8</description>
    </item>
    
    <item>
      <title>JavaScript client offset相关属性和对比</title>
      <link>/zh/posts/javascript-client-offset%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7%E5%92%8C%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Wed, 14 Apr 2021 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-client-offset%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7%E5%92%8C%E5%AF%B9%E6%AF%94/</guid>
      <description>1.client 2.offset 3.offset/scroll/client对比 1.client clientWidth: width+padding; clientHeight: width+padding; 属性只读，不可修改 clientX clientY event调用 clientTop clientLeft 盒子的border 2.offset offsetWidth: width+padding+border; offsetHeight: width+padding+border; offsetPare</description>
    </item>
    
    <item>
      <title>JavaScript scroll相关属性和缓动动画</title>
      <link>/zh/posts/javascript-scroll%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7%E5%92%8C%E7%BC%93%E5%8A%A8%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Wed, 14 Apr 2021 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-scroll%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7%E5%92%8C%E7%BC%93%E5%8A%A8%E5%8A%A8%E7%94%BB/</guid>
      <description>1.scroll 2.缓动动画 1.scroll window.onscroll(): 当我们用鼠标滚轮，滚动网页的时候，会触发 window.onscroll() 方法 scrollWidth and scrollHeight: width + padding scrollTop and scrollLeft: 当某个元素满足scrollHeight - scrollTop == clientHeight</description>
    </item>
    
    <item>
      <title>CSS Less</title>
      <link>/zh/posts/css-less/</link>
      <pubDate>Thu, 01 Oct 2020 22:02:39 +0800</pubDate>
      
      <guid>/zh/posts/css-less/</guid>
      <description>// 变量 // 选择器调用 路径调用 属性调用 变量调用 @width: 10px; @height: @width + 10px; #header { width: @width; height: @height; } // Mixins // () -&amp;gt; 本体不编译 // (@color:black;@margin:10px) 指定参数 .bordered { border-top: dotted 1px black; border-bottom: solid 2px black; } #menu a { color: #111; .bordered(); } .post a { color: red; .bordered(); }</description>
    </item>
    
    <item>
      <title>CSS Sass</title>
      <link>/zh/posts/css-sass/</link>
      <pubDate>Thu, 01 Oct 2020 22:02:39 +0800</pubDate>
      
      <guid>/zh/posts/css-sass/</guid>
      <description>// 变量 $nav-color: #F90; nav { $width: 100px; width: $width; color: $nav-color; } //编译后 nav { width: 100px; color: #F90; } // @mixin @mixin rounded-corners { -moz-border-radius: 5px; -webkit-border-radius: 5px; border-radius: 5px; } notice { background-color: green; border: 2px solid #00aa00; @include rounded-corners; } //sass最终生成： .notice { background-color: green; border: 2px solid #00aa00; -moz-border-radius: 5px; -webkit-border-radius: 5px; border-radius: 5px; }</description>
    </item>
    
    <item>
      <title>CSS 动画</title>
      <link>/zh/posts/css-%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Thu, 01 Oct 2020 22:02:39 +0800</pubDate>
      
      <guid>/zh/posts/css-%E5%8A%A8%E7%94%BB/</guid>
      <description>1.动画 1.动画 过渡： transition transition-property:all transition-duration:1s; transition-timing-function:linear||ease||ease-in||ease-out||ease-in-out transition-delay:1s; 2D&amp;amp;3D： transform transform: scale(x, y); transform: translate(-50%, -50%); transform: rotate(45deg); transform-style 动画 @keyframes 定义:@keyframes xxx { from { } to { }} 调用:animation: xxx 1s;</description>
    </item>
    
    <item>
      <title>CSS 定位和层叠上下文原理</title>
      <link>/zh/posts/css-%E5%AE%9A%E4%BD%8D%E5%92%8C%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87%E5%8E%9F%E7%90%86/</link>
      <pubDate>Thu, 01 Oct 2020 22:02:39 +0800</pubDate>
      
      <guid>/zh/posts/css-%E5%AE%9A%E4%BD%8D%E5%92%8C%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87%E5%8E%9F%E7%90%86/</guid>
      <description>1.定位 1.定位 position static(default) relative 参照物：自身 不脱标 使用情形： 微调元素，方位和z-index能够生效 做absolute的参考，子绝父相 absolute 参照物：父 脱标 top:参照</description>
    </item>
    
    <item>
      <title>CSS 属性 选择器 浮动</title>
      <link>/zh/posts/css-%E5%B1%9E%E6%80%A7-%E9%80%89%E6%8B%A9%E5%99%A8-%E6%B5%AE%E5%8A%A8/</link>
      <pubDate>Thu, 01 Oct 2020 22:02:39 +0800</pubDate>
      
      <guid>/zh/posts/css-%E5%B1%9E%E6%80%A7-%E9%80%89%E6%8B%A9%E5%99%A8-%E6%B5%AE%E5%8A%A8/</guid>
      <description>1.字体，文本，背景 2.CSS变量 3.选择器 4.浮动 1.字体，文本，背景 p{ font-size: 50px; /*字体大小*/ line-height: 30px; /*行高*/ font-family: 幼圆,黑体; /*字体类型：如果没有幼圆</description>
    </item>
    
    <item>
      <title>CSS 布局</title>
      <link>/zh/posts/css-%E5%B8%83%E5%B1%80/</link>
      <pubDate>Thu, 01 Oct 2020 22:02:39 +0800</pubDate>
      
      <guid>/zh/posts/css-%E5%B8%83%E5%B1%80/</guid>
      <description>1.布局 1.布局 table display:table display:table-cell，相当于td元素 display:table-row，相当于tr元素 table-layout:fixed | auto(默认) flex flex-direction row|row-reverse|column|column-reverse flex-warp</description>
    </item>
    
    <item>
      <title>HTML速查</title>
      <link>/zh/posts/html%E9%80%9F%E6%9F%A5/</link>
      <pubDate>Thu, 01 Oct 2020 22:02:39 +0800</pubDate>
      
      <guid>/zh/posts/html%E9%80%9F%E6%9F%A5/</guid>
      <description>1.HTML速查 2.规范 3.html5骨架 1.HTML速查 &amp;lt;!-- 文档 --&amp;gt; &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;文档标题&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; 可见文本.</description>
    </item>
    
    <item>
      <title>JavaScript 内置对象</title>
      <link>/zh/posts/javascript-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Thu, 01 Oct 2020 22:02:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</guid>
      <description>1. {String} 2. {Number} 3. {Array} 1. {String} 字符串的方法不会改变原串，会返回一个新值 //查找 // indexOf()/lastIndexOf(): @params:(str,startIndex); @return:index|-1; // search(): @params:(Reg|str); @return:index|-1; // includes(): @params:(str,[position|0]); @return:Boolean; //startsWith()/endsWith(): @params:(str,[position|0]); @return:Boolean; //获取字符 // charAt(): = str[index] @params:(index); @return:str|&#39;&#39;; // charCodeAt(): @params:(index); @return:str|&#39;&#39;; // 截取 // slice(): @params:(startIndex,endIndex); @return:str; @note</description>
    </item>
    
    <item>
      <title>Node.js</title>
      <link>/zh/posts/node.js/</link>
      <pubDate>Thu, 01 Oct 2020 22:02:39 +0800</pubDate>
      
      <guid>/zh/posts/node.js/</guid>
      <description>1. 模块化规范 2. Node 内置包 3. 登录流程 1. 模块化规范 CommonJS require exports module __dirname__filename 导入：= require(&amp;rsquo;&#39;) 导出：module.exports = ES6Module &amp;lt;script type=&#39;module&#39;&amp;gt;&amp;lt;/script&amp;gt; 导入： import {} from &amp;rsquo;&amp;rsquo; /import xxx from &#39;&#39; 导出： export {let var const function class}/export default 2.</description>
    </item>
    
    <item>
      <title>Webpack</title>
      <link>/zh/posts/webpack/</link>
      <pubDate>Thu, 01 Oct 2020 22:02:39 +0800</pubDate>
      
      <guid>/zh/posts/webpack/</guid>
      <description>1. Webpack 1. Webpack // npx webpack =&amp;gt; npm run build // package.json &amp;quot;scripts&amp;quot;: { &amp;quot;build&amp;quot;: &amp;quot;webpack&amp;quot; } // module.exports = { entry: &#39;./src/index.js&#39;, output: { filename: &#39;bundle.js&#39;, path: path.resolve(__dirname, &#39;dist&#39;) } module: { rules: [ { test: /\.(js|jsx)$/, use: &#39;babel-loader&#39; } ] }, plugins: [ new webpack.optimize.UglifyJsPlugin(), new HtmlWebpackPlugin({template: &#39;./src/index.html&#39;}) ] }; 面试 Loader css-loader: 加载CSS，支持模块化，压缩，文件导</description>
    </item>
    
    <item>
      <title>Web面试资料</title>
      <link>/zh/posts/%E9%9D%A2%E8%AF%95%E8%B5%84%E6%96%99/</link>
      <pubDate>Thu, 01 Oct 2020 22:02:39 +0800</pubDate>
      
      <guid>/zh/posts/%E9%9D%A2%E8%AF%95%E8%B5%84%E6%96%99/</guid>
      <description>1.HTML5 2.CSS3 3.JavaScript 4.Vue.js 5.Webpack 1.HTML5 问：语义化 答： 指对文本内容的结构化（内容语义化），选择合乎语义的标签（代码语义化），便于开发者阅读，维护和写出更优雅的代码的同时，让浏览器</description>
    </item>
    
    <item>
      <title>数据结构和算法</title>
      <link>/zh/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</link>
      <pubDate>Thu, 01 Oct 2020 22:02:39 +0800</pubDate>
      
      <guid>/zh/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</guid>
      <description>1.数据结构 数据结构 具体内容 题目 备注 线性表：向量Vector 单链表Singly Linked List 1. 双向链表 Double Linked Lists2. 静态链表 Static List3. 对称矩阵 Symmetric Matrix4. 稀疏矩阵 Sparse Matrix</description>
    </item>
    
    <item>
      <title>Github 远端仓库download不同本地</title>
      <link>/zh/posts/github-%E8%BF%9C%E7%AB%AF%E4%BB%93%E5%BA%93download%E4%B8%8D%E5%90%8C%E6%9C%AC%E5%9C%B0/</link>
      <pubDate>Sun, 20 Sep 2020 18:28:39 +0800</pubDate>
      
      <guid>/zh/posts/github-%E8%BF%9C%E7%AB%AF%E4%BB%93%E5%BA%93download%E4%B8%8D%E5%90%8C%E6%9C%AC%E5%9C%B0/</guid>
      <description>仅此记录过程，供日后复用 多主机共享ssh Public/Private Key 原本地仓库的id_rsa和id_rsa.pub打包传输到其他主机 生成 ssh key 命令： ssh-keygen -t -rsa -C &amp;quot;example@example.com&amp;quot; ssh -v git@github.com // No more authentication methods to</description>
    </item>
    
    <item>
      <title>GitHub Pages绑定个人域名</title>
      <link>/zh/posts/github-pages%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/</link>
      <pubDate>Fri, 18 Sep 2020 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/github-pages%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/</guid>
      <description>简单叙述一下Github Pages换域名的流程，以供日后使用。 域名解析配置 注册域名，实名认证 域名解析： 增加新纪录 记录类型：CNAME 主机记录：@ 记录值</description>
    </item>
    
    <item>
      <title>Meme主题部署到GitHub Pages</title>
      <link>/zh/posts/meme%E4%B8%BB%E9%A2%98%E9%83%A8%E7%BD%B2%E5%88%B0github-pages/</link>
      <pubDate>Thu, 17 Sep 2020 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/meme%E4%B8%BB%E9%A2%98%E9%83%A8%E7%BD%B2%E5%88%B0github-pages/</guid>
      <description>本地运行Meme主题使用正常Hugo流程即可，注意使用__Extended__版本Hugo即可。简单叙述一下部署到Github Pages的流程，以供日</description>
    </item>
    
    <item>
      <title>VS Code自定义快捷模块</title>
      <link>/zh/posts/vs-code%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BF%AB%E6%8D%B7%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Tue, 08 Sep 2020 18:02:39 +0800</pubDate>
      
      <guid>/zh/posts/vs-code%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BF%AB%E6%8D%B7%E6%A8%A1%E5%9D%97/</guid>
      <description>VS Code自定义快捷模块 //1.&amp;lt;ctrl&amp;gt;+&amp;lt;shift&amp;gt;+&amp;lt;p&amp;gt; //2. snippets //3. 新建 /*4. args: prefix：使用代码段的快捷入口 body：需要设置的代码放在这里,字符串间换行的话使用\r\n换行符隔开.如</description>
    </item>
    
  </channel>
</rss>
