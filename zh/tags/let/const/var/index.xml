<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>let/const/var on Marginlon</title>
    <link>/zh/tags/let/const/var/</link>
    <description>Recent content in let/const/var on Marginlon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language><atom:link href="/zh/tags/let/const/var/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaScript This指向</title>
      <link>/zh/posts/javascript-this%E6%8C%87%E5%90%91/</link>
      <pubDate>Wed, 13 Apr 2022 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-this%E6%8C%87%E5%90%91/</guid>
      <description>1. This指向: 函数执行的主体 1.1. 事件绑定 1.2. 函数执行 [普通/成员访问/匿名函数/回调函数] 1.3. 构造函数 1.4. 箭头函数 [生成器generator] 1.5. call/a</description>
    </item>
    
    <item>
      <title>JavaScript GC机制 闭包作用域 let/const/var</title>
      <link>/zh/posts/javascript-gc%E6%9C%BA%E5%88%B6-%E9%97%AD%E5%8C%85%E4%BD%9C%E7%94%A8%E5%9F%9F-let-const-var/</link>
      <pubDate>Tue, 12 Apr 2022 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-gc%E6%9C%BA%E5%88%B6-%E9%97%AD%E5%8C%85%E4%BD%9C%E7%94%A8%E5%9F%9F-let-const-var/</guid>
      <description>1. GC机制 2. 闭包作用域 3. let/const/var 1. GC机制 GC：浏览器的垃圾回收机制（内存释放） 栈内存： 加载页面，形成全局context，只有页面关闭后，全局context</description>
    </item>
    
  </channel>
</rss>
