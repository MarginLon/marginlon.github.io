<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Marginlon</title>
    <link>/zh/tags/javascript/</link>
    <description>Recent content in JavaScript on Marginlon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 17 Apr 2022 16:28:39 +0800</lastBuildDate><atom:link href="/zh/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaScript BOM</title>
      <link>/zh/posts/javascript-bom/</link>
      <pubDate>Sun, 17 Apr 2022 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-bom/</guid>
      <description> 1. BOM  1. BOM  navigator.userAgent history location window screen  </description>
    </item>
    
    <item>
      <title>JavaScript client offset相关属性和对比</title>
      <link>/zh/posts/javascript-client-offset%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7%E5%92%8C%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Sun, 17 Apr 2022 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-client-offset%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7%E5%92%8C%E5%AF%B9%E6%AF%94/</guid>
      <description>1.client 2.offset 3.offset/scroll/client对比 1.client clientWidth: width+padding; clientHeight: width+padding; 属性只读，不可修改 clientX clientY event调用 clientTop clientLeft 盒子的border 2.offset offsetWidth: width+padding+border; offsetHeight: width+padding+border; offsetPare</description>
    </item>
    
    <item>
      <title>JavaScript DOM</title>
      <link>/zh/posts/javascript-dom/</link>
      <pubDate>Sun, 17 Apr 2022 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-dom/</guid>
      <description>1. {DOM} 1. {DOM} 基本类型 Document DocumentType:doctype标签 Element:H5标签 Attr:元素的属性 Text:标签内文本 Comment:注释 Do</description>
    </item>
    
    <item>
      <title>JavaScript scroll相关属性和缓动动画</title>
      <link>/zh/posts/javascript-scroll%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7%E5%92%8C%E7%BC%93%E5%8A%A8%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Sun, 17 Apr 2022 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-scroll%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7%E5%92%8C%E7%BC%93%E5%8A%A8%E5%8A%A8%E7%94%BB/</guid>
      <description>1.scroll 2.缓动动画 1.scroll window.onscroll(): 当我们用鼠标滚轮，滚动网页的时候，会触发 window.onscroll() 方法 scrollWidth and scrollHeight: width + padding scrollTop and scrollLeft: 当某个元素满足scrollHeight - scrollTop == clientHeight</description>
    </item>
    
    <item>
      <title>JavaScript 事件绑定 事件对象 事件传播 事件委托</title>
      <link>/zh/posts/javascript-%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A-%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1-%E4%BA%8B%E4%BB%B6%E4%BC%A0%E6%92%AD-%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</link>
      <pubDate>Sun, 17 Apr 2022 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A-%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1-%E4%BA%8B%E4%BB%B6%E4%BC%A0%E6%92%AD-%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</guid>
      <description>1. 事件绑定 2. 事件对象 3. 事件传播 4. 事件委托 1. 事件绑定 DOM0: DOM对象.事件 = 函数 DOM2: element.addEventListener(&#39;click&#39;,function(){},false) true:捕获阶段触发 / false：冒泡阶段触发(默认) this: 事件对象 ie8</description>
    </item>
    
    <item>
      <title>JavaScript 堆栈内存 函数底层运行机制 块级作用域</title>
      <link>/zh/posts/javascript-%E5%A0%86%E6%A0%88%E5%86%85%E5%AD%98-%E5%87%BD%E6%95%B0%E5%BA%95%E5%B1%82%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6-%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
      <pubDate>Sun, 17 Apr 2022 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-%E5%A0%86%E6%A0%88%E5%86%85%E5%AD%98-%E5%87%BD%E6%95%B0%E5%BA%95%E5%B1%82%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6-%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
      <description>1. 堆栈内存 2. 函数底层运行机制 3. 块级作用域 1. 堆栈内存 栈内存(Stack) 执行环境栈 EC stack (execution context stack) EC(G) 全局执行上下文，全局代码执行 VO(G) 全局变量对象[存储全局上下文</description>
    </item>
    
    <item>
      <title>JavaScript 数据类型 类型检测 类型转换</title>
      <link>/zh/posts/javascript-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Sun, 17 Apr 2022 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
      <description>1. 数据类型 2. 类型检测 3. 类型转换 1. 数据类型 原始值 number: // NaN 非有效数字、Infinity 无穷大 // Number.MIN_SAFE_INTERGER // NaN == NaN false // NaN === NaN false =&amp;gt; NaN !== NaN // =&amp;gt; isNaN([value]); // Object.is(NaN,NaN); true string: &amp;lsquo;&amp;rsquo;, &amp;ldquo;&amp;rdquo;,`` boolean: true、f</description>
    </item>
    
    <item>
      <title>JavaScript 模块化编程 进阶技巧</title>
      <link>/zh/posts/javascript-%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B-%E8%BF%9B%E9%98%B6%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Sun, 17 Apr 2022 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B-%E8%BF%9B%E9%98%B6%E6%8A%80%E5%B7%A7/</guid>
      <description>1. 模块化编程 2. 进阶技巧 2.1 JQ环境区分 2.2 柯里化函数 2.3 compose函数 2.4 惰性函数 1. 模块化编程 模块化编程 高级单例 解决私有化：自执行函数，产生闭包 模块间的互</description>
    </item>
    
    <item>
      <title>JavaScript 精度问题</title>
      <link>/zh/posts/javascript-%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/</link>
      <pubDate>Fri, 08 Apr 2022 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/</guid>
      <description>1. 精度问题 1. 精度问题 解决方法： 扩大系数 第三方库 Math.js decimal.js big.js JS中有关于小数的计算会出现精准度丢失的问题 JS中所有值以2进制存在底层，会出现无限循环的情况 底层</description>
    </item>
    
    <item>
      <title>JavaScript AJAX</title>
      <link>/zh/posts/javascript-ajax/</link>
      <pubDate>Fri, 24 Sep 2021 16:28:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-ajax/</guid>
      <description>1. AJAX 1. AJAX AJAX解决网页异步刷新 同步刷新 异步刷新 1. 浏览器可以从服务器同时请求多项内容； 2. 浏览器请求返回的速度会快得多； 3. 只有页面中真正改变的部分得到更</description>
    </item>
    
    <item>
      <title>JS内置对象</title>
      <link>/zh/posts/javascript-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Thu, 01 Oct 2020 22:02:39 +0800</pubDate>
      
      <guid>/zh/posts/javascript-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</guid>
      <description>1. {String} 2. {Number} 3. {Array} 1. {String} 字符串的方法不会改变原串，会返回一个新值 //查找 // indexOf()/lastIndexOf(): @params:(str,startIndex); @return:index|-1; // search(): @params:(Reg|str); @return:index|-1; // includes(): @params:(str,[position|0]); @return:Boolean; //startsWith()/endsWith(): @params:(str,[position|0]); @return:Boolean; //获取字符 // charAt(): = str[index] @params:(index); @return:str|&#39;&#39;; // charCodeAt(): @params:(index); @return:str|&#39;&#39;; // 截取 // slice(): @params:(startIndex,endIndex); @return:str; @note</description>
    </item>
    
  </channel>
</rss>
